# create a pod from pod defintion file.
kubectl apply -f pod.yaml

#also this works
kubectl create -f <mainfest>.yaml

#create pod with container port
kubectl run redis --image redis --port 80   

# list pods 
kubectl get pods

# view details about a pod
kubectl describe pod <pod_name> 

# delete pod
kubectl delete pod <pod_name> --now

# open bash of pod and get terminal access
kubectl exec -it -n <namespace> <pod-name> -- /bin/bash 

# run command in the pods from outside
kubectl exec -it <pod_name> -- /bin/bash -c "date"
kubectl exec -it <pod_name> -- date

# get replicasets
kubectl get replicasets

# view replicaset details
kubectl describe rs/<rs-entity-name>

# delete replicaset
kubectl delete rs <rs-entity-name>

# scaling running replicasets
kubectl scale --replicas <new_count> rs/<rs-entity-name>

# scaling replicasets in file
kubectl scale --replicas <new_count> -f <replicaset_def.yaml>

# manifest of replicaset
kubectl get rs <rs-entity-name> -o yaml


# get manifest of any k8s object
kubectl -n <namespace> get <resource type> <resource Name> -o yaml.

# replcae a k8s object
kubectl replace -f <updated-entity-file>.
# or kubectl edit replicaset


# services
kubectl get svc

# get all namespaces
kubectl get namespaces # short hand ns 

# create namespaces
kubectl create namespace <namespace_name>

# get entity in particular namespace
kubectl get pods --namespace="<namespace_name>" # short hand -n

# get current context (unrelated to namespace)
kubectl config current-context

# switch namespace context
kubectl set context $(kubectl config current-context) --namespace=<namespace_name>

# list entity in all namespaces
kubectl get pod --all-namespaces # short hand -A


# deployments
kubectl create -f <deployment_manifest>.yaml

kubectl get deployments
kubectl apply -f <deployment_manifest>.yaml